"use strict";var e=require("@babel/runtime/helpers/extends"),r=require("react"),t=require("three"),n=require("@react-three/fiber"),a=require("./shaderMaterial.cjs.js"),o=require("./useTexture.cjs.js"),s=require("../helpers/constants.cjs.js");function i(e){var r=Object.create(null);return e&&Object.keys(e).forEach((function(t){if("default"!==t){var n=Object.getOwnPropertyDescriptor(e,t);Object.defineProperty(r,t,n.get?n:{enumerable:!0,get:function(){return e[t]}})}})),r.default=e,Object.freeze(r)}var c=i(r),l=i(t);const u=a.shaderMaterial({color:new l.Color("white"),scale:new l.Vector2(1,1),imageBounds:new l.Vector2(1,1),resolution:1024,map:null,zoom:1,radius:0,grayscale:0,opacity:1},"\n  varying vec2 vUv;\n  varying vec2 vPos;\n  void main() {\n    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position, 1.);\n    vUv = uv;\n    vPos = position.xy;\n  }\n",`\n  // mostly from https://gist.github.com/statico/df64c5d167362ecf7b34fca0b1459a44\n  varying vec2 vUv;\n  varying vec2 vPos;\n  uniform vec2 scale;\n  uniform vec2 imageBounds;\n  uniform float resolution;\n  uniform vec3 color;\n  uniform sampler2D map;\n  uniform float radius;\n  uniform float zoom;\n  uniform float grayscale;\n  uniform float opacity;\n  const vec3 luma = vec3(.299, 0.587, 0.114);\n  vec4 toGrayscale(vec4 color, float intensity) {\n    return vec4(mix(color.rgb, vec3(dot(color.rgb, luma)), intensity), color.a);\n  }\n  vec2 aspect(vec2 size) {\n    return size / min(size.x, size.y);\n  }\n  \n  const float PI = 3.14159265;\n    \n  // from https://iquilezles.org/articles/distfunctions\n  float udRoundBox( vec2 p, vec2 b, float r ) {\n    return length(max(abs(p)-b+r,0.0))-r;\n  }\n\n  void main() {\n    vec2 s = aspect(scale);\n    vec2 i = aspect(imageBounds);\n    float rs = s.x / s.y;\n    float ri = i.x / i.y;\n    vec2 new = rs < ri ? vec2(i.x * s.y / i.y, s.y) : vec2(s.x, i.y * s.x / i.x);\n    vec2 offset = (rs < ri ? vec2((new.x - s.x) / 2.0, 0.0) : vec2(0.0, (new.y - s.y) / 2.0)) / new;\n    vec2 uv = vUv * s / new + offset;\n    vec2 zUv = (uv - vec2(0.5, 0.5)) / zoom + vec2(0.5, 0.5);\n\n    vec2 res = vec2(scale * resolution);\n    vec2 halfRes = 0.5 * res;\n    float b = udRoundBox(vUv.xy * res - halfRes, halfRes, resolution * radius);    \n\t  vec3 a = mix(vec3(1.0,0.0,0.0), vec3(0.0,0.0,0.0), smoothstep(0.0, 1.0, b));\n    gl_FragColor = toGrayscale(texture2D(map, zUv) * vec4(color, opacity * a), grayscale);\n    \n    #include <tonemapping_fragment>\n    #include <${s.version>=154?"colorspace_fragment":"encodings_fragment"}>\n  }\n`),m=c.forwardRef((({children:r,color:t,segments:a=1,scale:o=1,zoom:s=1,grayscale:i=0,opacity:l=1,radius:m=0,texture:v,toneMapped:f,transparent:g,side:y,...d},p)=>{n.extend({ImageMaterial:u});const h=c.useRef(null),x=n.useThree((e=>e.size)),w=Array.isArray(o)?[o[0],o[1]]:[o,o],b=[v.image.width,v.image.height],z=Math.max(x.width,x.height);return c.useImperativeHandle(p,(()=>h.current),[]),c.useLayoutEffect((()=>{h.current.geometry.parameters&&h.current.material.scale.set(w[0]*h.current.geometry.parameters.width,w[1]*h.current.geometry.parameters.height)}),[]),c.createElement("mesh",e({ref:h,scale:Array.isArray(o)?[...o,1]:o},d),c.createElement("planeGeometry",{args:[1,1,a,a]}),c.createElement("imageMaterial",{color:t,map:v,zoom:s,grayscale:i,opacity:l,scale:w,imageBounds:b,resolution:z,radius:m,toneMapped:f,transparent:g,side:y,key:u.key}),r)})),v=c.forwardRef((({url:r,...t},n)=>{const a=o.useTexture(r);return c.createElement(m,e({},t,{texture:a,ref:n}))})),f=c.forwardRef((({url:r,...t},n)=>c.createElement(m,e({},t,{ref:n})))),g=c.forwardRef(((r,t)=>{if(r.url)return c.createElement(v,e({},r,{ref:t}));if(r.texture)return c.createElement(f,e({},r,{ref:t}));throw new Error("<Image /> requires a url or texture")}));exports.Image=g;
