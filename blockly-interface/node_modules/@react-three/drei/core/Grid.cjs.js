"use strict";var e=require("@babel/runtime/helpers/extends"),n=require("react"),o=require("three"),i=require("react-merge-refs"),r=require("@react-three/fiber"),t=require("./shaderMaterial.cjs.js"),l=require("../helpers/constants.cjs.js");function a(e){var n=Object.create(null);return e&&Object.keys(e).forEach((function(o){if("default"!==o){var i=Object.getOwnPropertyDescriptor(e,o);Object.defineProperty(n,o,i.get?i:{enumerable:!0,get:function(){return e[o]}})}})),n.default=e,Object.freeze(n)}var s=a(n),c=a(o);const f=t.shaderMaterial({cellSize:.5,sectionSize:1,fadeDistance:100,fadeStrength:1,cellThickness:.5,sectionThickness:1,cellColor:new c.Color,sectionColor:new c.Color,infiniteGrid:!1,followCamera:!1,worldCamProjPosition:new c.Vector3,worldPlanePosition:new c.Vector3},"\n    varying vec3 localPosition;\n    varying vec4 worldPosition;\n\n    uniform vec3 worldCamProjPosition;\n    uniform vec3 worldPlanePosition;\n    uniform float fadeDistance;\n    uniform bool infiniteGrid;\n    uniform bool followCamera;\n\n    void main() {\n      localPosition = position.xzy;\n      if (infiniteGrid) localPosition *= 1.0 + fadeDistance;\n      \n      worldPosition = modelMatrix * vec4(localPosition, 1.0);\n      if (followCamera) {\n        worldPosition.xyz += (worldCamProjPosition - worldPlanePosition);\n        localPosition = (inverse(modelMatrix) * worldPosition).xyz;\n      }\n\n      gl_Position = projectionMatrix * viewMatrix * worldPosition;\n    }\n  ",`\n    varying vec3 localPosition;\n    varying vec4 worldPosition;\n\n    uniform vec3 worldCamProjPosition;\n    uniform float cellSize;\n    uniform float sectionSize;\n    uniform vec3 cellColor;\n    uniform vec3 sectionColor;\n    uniform float fadeDistance;\n    uniform float fadeStrength;\n    uniform float cellThickness;\n    uniform float sectionThickness;\n\n    float getGrid(float size, float thickness) {\n      vec2 r = localPosition.xz / size;\n      vec2 grid = abs(fract(r - 0.5) - 0.5) / fwidth(r);\n      float line = min(grid.x, grid.y) + 1.0 - thickness;\n      return 1.0 - min(line, 1.0);\n    }\n\n    void main() {\n      float g1 = getGrid(cellSize, cellThickness);\n      float g2 = getGrid(sectionSize, sectionThickness);\n\n      float dist = distance(worldCamProjPosition, worldPosition.xyz);\n      float d = 1.0 - min(dist / fadeDistance, 1.0);\n      vec3 color = mix(cellColor, sectionColor, min(1.0, sectionThickness * g2));\n\n      gl_FragColor = vec4(color, (g1 + g2) * pow(d, fadeStrength));\n      gl_FragColor.a = mix(0.75 * gl_FragColor.a, gl_FragColor.a, g2);\n      if (gl_FragColor.a <= 0.0) discard;\n\n      #include <tonemapping_fragment>\n      #include <${l.version>=154?"colorspace_fragment":"encodings_fragment"}>\n    }\n  `),d=s.forwardRef((({args:n,cellColor:o="#000000",sectionColor:t="#2080ff",cellSize:l=.5,sectionSize:a=1,followCamera:d=!1,infiniteGrid:m=!1,fadeDistance:u=100,fadeStrength:g=1,cellThickness:P=.5,sectionThickness:w=1,side:v=c.BackSide,...C},h)=>{r.extend({GridMaterial:f});const p=s.useRef(null),x=new c.Plane,z=new c.Vector3(0,1,0),j=new c.Vector3(0,0,0);r.useFrame((e=>{x.setFromNormalAndCoplanarPoint(z,j).applyMatrix4(p.current.matrixWorld);const n=p.current.material,o=n.uniforms.worldCamProjPosition,i=n.uniforms.worldPlanePosition;x.projectPoint(e.camera.position,o.value),i.value.set(0,0,0).applyMatrix4(p.current.matrixWorld)}));const S={cellSize:l,sectionSize:a,cellColor:o,sectionColor:t,cellThickness:P,sectionThickness:w},k={fadeDistance:u,fadeStrength:g,infiniteGrid:m,followCamera:d};return s.createElement("mesh",e({ref:i([p,h]),frustumCulled:!1},C),s.createElement("gridMaterial",e({transparent:!0,"extensions-derivatives":!0,side:v},S,k)),s.createElement("planeGeometry",{args:n}))}));exports.Grid=d;
